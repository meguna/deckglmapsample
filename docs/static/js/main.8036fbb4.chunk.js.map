{"version":3,"sources":["deckgl-layers.js","App.js","serviceWorker.js","index.js"],"names":["PARK_COLOR","PUBLIC_COLOR","getFillColor","d","room_type","p","Math","log","price","interpolatedColor","getLineColor","offset","c1","c2","renderLayers","props","data","settings","onHover","ScatterplotLayer","id","getPosition","Number","longitude","latitude","getRadius","stroked","opacity","pickable","radiusMinPixels","radiusMaxPixels","lineWidthMinPixels","INITIAL_VIEW_STATE","zoom","minZoom","maxZoom","pitch","bearing","App","onDataClick","info","event","setState","clicked","clickLoc","resetClick","state","this","className","style","top","left","name","layers","ls","initialViewState","onClick","onViewStateChange","controller","mapboxApiAccessToken","process","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sn7hCAEA,IAAMA,EAAa,CAAC,IAAK,IAAK,IACxBC,EAAe,CAAC,IAAK,GAAI,KAEzBC,EAAe,SAAAC,GACnB,GAAoB,oBAAhBA,EAAEC,UACJ,MAAO,CAAC,EAAE,EAAE,EAAE,GAEd,IAAIC,EAAIC,KAAKC,IAAIJ,EAAEK,MAAQ,KAG3B,OAAOC,EADPJ,GADAA,EAAKA,EAAI,EAAK,EAAIA,GACT,EAAK,EAAIA,EACUL,EAAYC,IAItCS,EAAe,SAAAP,GACnB,GAAoB,oBAAhBA,EAAEC,UACJ,MAAO,CAAC,EAAE,EAAE,EAAE,GAEd,IAAIC,EAAIC,KAAKC,IAAIJ,EAAEK,MAAQ,KAG3B,OAAOC,EADPJ,GADAA,EAAKA,EAAI,EAAK,EAAIA,GACT,EAAK,EAAIA,EACUL,EAAYC,IAItCQ,EAAoB,SAACE,EAAQC,EAAIC,GAIrC,MAAO,CAHGD,EAAG,GAAKD,GAAUE,EAAG,GAAKD,EAAG,IAC7BA,EAAG,GAAKD,GAAUE,EAAG,GAAKD,EAAG,IAC7BA,EAAG,GAAKD,GAAUE,EAAG,GAAKD,EAAG,MAI1B,SAASE,EAAaC,GAAQ,IACnCC,EAA4BD,EAA5BC,KAAeC,GAAaF,EAAtBG,QAAsBH,EAAbE,UACvB,MAAO,CACH,IAAIE,IAAJ,GACEC,GAAI,cACJC,YAAa,SAAAlB,GAAC,MAAI,CAACmB,OAAOnB,EAAEoB,WAAYD,OAAOnB,EAAEqB,YACjDtB,eACAQ,eACAe,UAAW,SAAAtB,GAAC,OAAI,IAChBuB,SAAS,EACTC,QAAS,GACTC,UAAU,EACVC,gBAAiB,IACjBC,gBAAiB,GACjBC,mBAAoB,GACpBf,QACGC,K,aC1CLe,G,OAAqB,CACzBT,WAAY,MACZC,SAAU,MACVS,KAAM,GACNC,QAAS,EACTC,QAAS,GACTC,MAAO,EACPC,QAAS,IA4DIC,E,YAxDb,WAAYvB,GAAQ,IAAD,8BACjB,4CAAMA,KAORwB,YAAc,SAACC,EAAMC,GACnB,EAAKC,SAAS,CACZC,QAASH,EAAI,OACbI,SAAUH,EAAK,UAXA,EAenBI,WAAa,WACX,EAAKH,SAAS,CACZC,QAAS,KACTC,SAAU,QAhBZ,EAAKE,MAAQ,CACXH,QAAS,KACTC,SAAU,MAJK,E,sEAsBT,IAAD,EACuBG,KAAKD,MAA3BH,EADD,EACCA,QAASC,EADV,EACUA,SACjB,OACE,yBAAKI,UAAU,OACb,yBAAKA,UAAU,UACb,yDACA,0MAGA,yFAEW,MAAXL,GACA,yBAAKK,UAAU,UAAUC,MAAO,CAACC,IAAKN,EAAQ,EAAOO,KAAMP,EAAQ,IACjE,2BAAID,EAAQS,MACZ,2BAAIT,EAAQvC,WACZ,sCAAQuC,EAAQnC,SAGpB,kBAAC,IAAD,CACE6C,OAAQvC,EAAa,CAACE,KAAMsC,IAC5BC,iBAAkBvB,EAClBwB,QAAST,KAAKR,YACdkB,kBAAmBV,KAAKF,WACxBa,YAAU,GAEV,kBAAC,IAAD,CACEC,qBAAsBC,mG,GAjDhBC,aCNEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8036fbb4.chunk.js","sourcesContent":["import {ScatterplotLayer} from 'deck.gl';\n\nconst PARK_COLOR = [252, 107, 23];\nconst PUBLIC_COLOR = [116, 35, 170];\n\nconst getFillColor = d => {\n  if (d.room_type !== 'Entire home/apt') {\n    return [0,0,0,0]\n  } else {\n    let p = Math.log(d.price / 100);\n    p = (p > 1) ? 1 : p;\n    p = (p < 0) ? 0 : p;\n    return interpolatedColor(p, PARK_COLOR, PUBLIC_COLOR);\n  }\n}\n\nconst getLineColor = d => {\n  if (d.room_type === 'Entire home/apt') {\n    return [0,0,0,0];\n  } else {\n    let p = Math.log(d.price / 100);\n    p = (p > 1) ? 1 : p;\n    p = (p < 0) ? 0 : p;\n    return interpolatedColor(p, PARK_COLOR, PUBLIC_COLOR);\n  }\n}\n\nconst interpolatedColor = (offset, c1, c2) => {\n  const r = c1[0] + offset * (c2[0] - c1[0]);\n  const g = c1[1] + offset * (c2[1] - c1[1]);\n  const b = c1[2] + offset * (c2[2] - c1[2]);\n  return [r,g,b];\n}\n\nexport default function renderLayers(props) {\n  const { data, onHover, settings } = props;\n  return [\n      new ScatterplotLayer({\n        id: 'scatterplot',\n        getPosition: d => [Number(d.longitude), Number(d.latitude)], //-71,42\n        getFillColor,\n        getLineColor,\n        getRadius: d => 20,\n        stroked: true,\n        opacity: 0.5,\n        pickable: true,\n        radiusMinPixels: 0.25,\n        radiusMaxPixels: 30,\n        lineWidthMinPixels: 0.5,\n        data,\n        ...settings\n      }),\n  ];\n}","import React, {Component} from 'react';\nimport StaticMap from 'react-map-gl';\nimport 'mapbox-gl/dist/mapbox-gl.css';\nimport DeckGL from 'deck.gl';\nimport renderLayers from './deckgl-layers.js';\nimport ls from './ls.json';\nimport './styles.css';\n\nconst INITIAL_VIEW_STATE = {\n  longitude: -71.08,\n  latitude: 42.32,\n  zoom: 12,\n  minZoom: 5,\n  maxZoom: 16,\n  pitch: 0,\n  bearing: 0\n};\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      clicked: null,\n      clickLoc: null\n    }\n  }\n\n  onDataClick = (info, event) => {\n    this.setState({\n      clicked: info['object'],\n      clickLoc: event['center']\n    })\n  }\n\n  resetClick = () => {\n    this.setState({\n      clicked: null,\n      clickLoc: null\n    })\n  }\n\n  render() {\n    const { clicked, clickLoc } = this.state;\n    return (\n      <div className=\"App\">\n        <div className=\"legend\">\n          <h3>AirBnb listings in Boston</h3>\n          <p>More expensive listings are colored purple, while \n          cheaper listings are colored orange. Listings for entire apartments\n          are filled in and listings for private rooms are not.</p>\n          <p>Click on a listing to view specific information about it.</p>\n        </div>\n        {(clicked != null) && (\n          <div className=\"tooltip\" style={{top: clickLoc['y'], left: clickLoc['x']}}>\n            <p>{clicked.name}</p>\n            <p>{clicked.room_type}</p>\n            <p>{`$${clicked.price}`}</p>\n          </div>\n        )}\n        <DeckGL\n          layers={renderLayers({data: ls})}\n          initialViewState={INITIAL_VIEW_STATE}\n          onClick={this.onDataClick}\n          onViewStateChange={this.resetClick}\n          controller\n        >\n          <StaticMap \n            mapboxApiAccessToken={process.env.REACT_APP_MAPBOX_API_TOKEN}\n          />\n        </DeckGL>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}